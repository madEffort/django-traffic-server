services:
  app:
    build: .
    image: my_app_image
    container_name: my_app_container
    command: /app/entrypoint.sh
    ports:
      - "8000:8000" # 프로덕션 시 주석
    env_file:
      - .env
    volumes:
      - .:/app
    depends_on:
      - postgres

  nginx:
    image: nginx:latest
    container_name: my_nginx_container
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/app/staticfiles # staticfiles 볼륨 추가
    ports:
      - "80:80"
    depends_on:
      - app

  postgres:
    image: postgres:latest
    container_name: my_postgres_container
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  prometheus:
    image: prom/prometheus
    container_name: my_prometheus_container
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/:/etc/prometheus/

  grafana:
    image: grafana/grafana
    container_name: my_grafana_container
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource"
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

volumes:
  postgres_data:
  grafana_data:
# 실행
# docker-compose --env-file .env up -d
